// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication & User Management
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  discordId           String?   @unique
  discordUsername     String?
  pwApiKey            String?   @db.Text // Politics & War API Key
  pwNationId          Int?      @unique // Politics & War Nation ID
  pwNationName        String?
  currentAllianceId   Int?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  accounts            Account[]
  sessions            Session[]
  nation              Nation?   @relation(fields: [pwNationId], references: [id])
  sentBankTransactions    Bankrec[] @relation("SentTransactions")
  receivedBankTransactions Bankrec[] @relation("ReceivedTransactions")
  bankedTransactions      Bankrec[] @relation("BankerTransactions")
  auditLogs              AuditLog[]
  createdTaxBrackets     TaxBracket[] @relation("TaxBracketCreator")
  modifiedTaxBrackets    TaxBracket[] @relation("TaxBracketModifier")
  allianceAdminRoles     AllianceAdmin[]
  memberHoldings         MemberHolding[]
  holdingTransactions    HoldingTransaction[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Politics & War Data Models
model Alliance {
  id              Int       @id // P&W Alliance ID
  name            String
  acronym         String?
  score           Float?
  color           String?
  foundedDate     DateTime?
  acceptMembers   Boolean   @default(true)
  flag            String?
  forumLink       String?
  discordLink     String?
  wikiLink        String?
  description     String?   @db.Text
  averageScore    Float?
  rank            Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  nations         Nation[]
  treaties        Treaty[]  @relation("Alliance1Treaties")
  receivedTreaties Treaty[] @relation("Alliance2Treaties")
  wars            War[]     @relation("AllianceWars")
  taxBrackets     TaxBracket[]
  bankRecords     Bankrec[] @relation("AllianceBankRecords")
  allianceModules AllianceModule[]
  discordServers  DiscordServer[]
  allianceAdmins  AllianceAdmin[]
  apiKey          AllianceApiKey?
  memberHoldings  MemberHolding[]

  // Bank resources
  money           Float?
  coal            Float?
  oil             Float?
  uranium         Float?
  iron            Float?
  bauxite         Float?
  lead            Float?
  gasoline        Float?
  munitions       Float?
  steel           Float?
  aluminum        Float?
  food            Float?

  @@map("alliances")
}

// Alliance Administration System
model AllianceAdmin {
  id              String    @id @default(cuid())
  allianceId      Int
  userId          String    // User who is an admin for this alliance
  discordId       String    // Discord ID of the admin
  role            String    @default("admin") // admin, owner, etc.
  permissions     String[]  // Array of permission strings
  addedBy         String    // User ID who added this admin
  addedAt         DateTime  @default(now())
  isActive        Boolean   @default(true)
  
  alliance        Alliance  @relation(fields: [allianceId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([allianceId, userId])
  @@map("alliance_admins")
}

// Alliance API Keys for P&W Integration
model AllianceApiKey {
  id              String    @id @default(cuid())
  allianceId      Int       @unique
  apiKey          String    @db.Text
  keyName         String?   // Optional name for the key
  addedBy         String    // Admin who added this key
  addedAt         DateTime  @default(now())
  lastUsed        DateTime?
  isActive        Boolean   @default(true)
  
  alliance        Alliance  @relation(fields: [allianceId], references: [id], onDelete: Cascade)
  
  @@map("alliance_api_keys")
}

model Nation {
  id                  Int       @id // P&W Nation ID
  allianceId          Int?
  nationName          String
  leaderName          String
  continent           String?
  warPolicy           String?
  domesticPolicy      String?
  color               String?
  numCities           Int?
  score               Float?
  population          Int?
  flag                String?
  vacationModeturns   Int?
  beigeTurns          Int?
  lastActive          DateTime?
  foundedDate         DateTime?
  discordId           String?
  discordUsername     String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  alliance            Alliance? @relation(fields: [allianceId], references: [id])
  user                User?
  cities              City[]
  offensiveWars       War[]     @relation("AttackerWars")
  defensiveWars       War[]     @relation("DefenderWars")
  sentBankRecords     Bankrec[] @relation("NationSentBankRecords")
  receivedBankRecords Bankrec[] @relation("NationReceivedBankRecords")
  bankedRecords       Bankrec[] @relation("NationBankerRecords")

  // Military units
  soldiers            Int?
  tanks               Int?
  aircraft            Int?
  ships               Int?
  missiles            Int?
  nukes               Int?
  spies               Int?

  // Resources (only visible to alliance officers or self)
  money               Float?
  coal                Float?
  oil                 Float?
  uranium             Float?
  iron                Float?
  bauxite             Float?
  lead                Float?
  gasoline            Float?
  munitions           Float?
  steel               Float?
  aluminum            Float?
  food                Float?
  credits             Int?

  @@map("nations")
}

model City {
  id              Int     @id // P&W City ID
  nationId        Int
  name            String
  founded         DateTime?
  infrastructure  Float?
  land            Float?
  population      Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  nation          Nation  @relation(fields: [nationId], references: [id])

  @@map("cities")
}

// War System
model War {
  id                Int       @id // P&W War ID
  declaredDate      DateTime
  endedDate         DateTime?
  reason            String?
  warType           String?
  groundControl     Int?      // Nation ID with ground control
  airSuperiority    Int?      // Nation ID with air superiority
  navalBlockade     Int?      // Nation ID with naval blockade
  winnerId          Int?      // Nation ID of winner
  turnsLeft         Int?
  attackerId        Int
  defenderId        Int
  attAllianceId     Int?
  defAllianceId     Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  attacker          Nation    @relation("AttackerWars", fields: [attackerId], references: [id])
  defender          Nation    @relation("DefenderWars", fields: [defenderId], references: [id])
  attAlliance       Alliance? @relation("AllianceWars", fields: [attAllianceId], references: [id])
  attacks           WarAttack[]

  @@map("wars")
}

model WarAttack {
  id                  Int       @id // P&W Attack ID
  warId               Int
  attackerId          Int
  defenderId          Int
  attackType          String
  date                DateTime
  victor              Int       // Nation ID of victor
  success             Int       // 0-3 success level
  cityId              Int?
  infraDestroyed      Float?
  improvementsLost    Int?
  moneyStolen         Float?
  resistanceLost      Int?
  createdAt           DateTime  @default(now())

  war                 War       @relation(fields: [warId], references: [id])

  @@map("war_attacks")
}

// Treaty System
model Treaty {
  id              Int       @id // P&W Treaty ID
  alliance1Id     Int
  alliance2Id     Int
  treatyType      String
  treatyUrl       String?
  turnsLeft       Int?
  approved        Boolean   @default(false)
  signedDate      DateTime?
  createdAt       DateTime  @default(now())

  alliance1       Alliance  @relation("Alliance1Treaties", fields: [alliance1Id], references: [id])
  alliance2       Alliance  @relation("Alliance2Treaties", fields: [alliance2Id], references: [id])

  @@map("treaties")
}

// Banking System
model Bankrec {
  id              String    @id @default(cuid()) // Use cuid for internal ID
  pwId            Int?      @unique // P&W Bank Record ID
  date            DateTime
  senderId        String?   // User ID
  receiverId      String?   // User ID
  bankerId        String?   // User ID (who performed the transaction)
  senderNationId  Int?      // P&W Nation ID
  receiverNationId Int?     // P&W Nation ID
  bankerNationId  Int?      // P&W Nation ID
  senderAllianceId Int?     // P&W Alliance ID
  receiverAllianceId Int?   // P&W Alliance ID
  senderType      Int       // 1 = nation, 2 = alliance
  receiverType    Int       // 1 = nation, 2 = alliance
  note            String?
  taxId           Int?      // Tax bracket ID if this is a tax record
  createdAt       DateTime  @default(now())

  sender          User?     @relation("SentTransactions", fields: [senderId], references: [id])
  receiver        User?     @relation("ReceivedTransactions", fields: [receiverId], references: [id])
  banker          User?     @relation("BankerTransactions", fields: [bankerId], references: [id])
  senderNation    Nation?   @relation("NationSentBankRecords", fields: [senderNationId], references: [id])
  receiverNation  Nation?   @relation("NationReceivedBankRecords", fields: [receiverNationId], references: [id])
  bankerNation    Nation?   @relation("NationBankerRecords", fields: [bankerNationId], references: [id])
  alliance        Alliance? @relation("AllianceBankRecords", fields: [senderAllianceId], references: [id])

  // Resources transferred
  money           Float?
  coal            Float?
  oil             Float?
  uranium         Float?
  iron            Float?
  bauxite         Float?
  lead            Float?
  gasoline        Float?
  munitions       Float?
  steel           Float?
  aluminum        Float?
  food            Float?

  @@map("bank_records")
}

// Tax System
model TaxBracket {
  id                  Int       @id // P&W Tax Bracket ID
  allianceId          Int
  name                String
  taxRate             Int       // Money tax rate
  resourceTaxRate     Int       // Resource tax rate
  createdDate         DateTime
  modifiedDate        DateTime?
  creatorId           String?   // User ID
  lastModifierId      String?   // User ID
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  alliance            Alliance  @relation(fields: [allianceId], references: [id])
  creator             User?     @relation("TaxBracketCreator", fields: [creatorId], references: [id])
  lastModifier        User?     @relation("TaxBracketModifier", fields: [lastModifierId], references: [id])

  @@map("tax_brackets")
}

// Module System for Feature Access Control
model Module {
  id              String    @id @default(cuid())
  name            String    @unique
  description     String?
  category        String?   // member-mgmt, war-mgmt, economic, analytics, recruitment, admin
  requiredPerms   String[]  // Required permissions to access
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  allianceModules AllianceModule[]

  @@map("modules")
}

model AllianceModule {
  id              String    @id @default(cuid())
  allianceId      Int
  moduleId        String
  enabled         Boolean   @default(true)
  enabledBy       String?   // Admin user ID who enabled this
  enabledAt       DateTime  @default(now())
  settings        Json?     // Module-specific settings

  alliance        Alliance  @relation(fields: [allianceId], references: [id])
  module          Module    @relation(fields: [moduleId], references: [id])

  @@unique([allianceId, moduleId])
  @@map("alliance_modules")
}

// Discord Bot Multi-Tenant System
model DiscordServer {
  id              String    @id // Discord Server ID
  name            String?
  allianceId      Int?      // Linked P&W Alliance
  ownerId         String?   // Discord User ID of server owner
  invitedBy       String?   // User ID who invited the bot
  isActive        Boolean   @default(true)
  settings        Json?     // Server-specific bot settings
  enabledModules  String[]  // Module IDs enabled for this server
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  alliance        Alliance? @relation(fields: [allianceId], references: [id])
  botSettings     BotSetting[]

  @@map("discord_servers")
}

model BotSetting {
  id              String    @id @default(cuid())
  serverId        String    // Discord Server ID
  key             String    // Setting key
  value           String    // Setting value
  category        String?   // Setting category (permissions, commands, etc.)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  server          DiscordServer @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@unique([serverId, key])
  @@map("bot_settings")
}

// Audit Logging
model AuditLog {
  id              String    @id @default(cuid())
  userId          String?   // User who performed the action
  action          String    // Action performed
  resource        String?   // Resource affected (alliance, nation, etc.)
  resourceId      String?   // ID of the resource
  details         Json?     // Additional details about the action
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime  @default(now())

  user            User?     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Member Holdings System - Virtual Bank Accounts
model MemberHolding {
  id              String    @id @default(cuid())
  userId          String    // User who owns this holding
  allianceId      Int       // Alliance where the holding is managed
  
  // Current balances in holdings
  money           Float     @default(0)
  coal            Float     @default(0)
  oil             Float     @default(0)
  uranium         Float     @default(0)
  iron            Float     @default(0)
  bauxite         Float     @default(0)
  lead            Float     @default(0)
  gasoline        Float     @default(0)
  munitions       Float     @default(0)
  steel           Float     @default(0)
  aluminum        Float     @default(0)
  food            Float     @default(0)
  
  // Lifetime totals for auditing
  totalDeposited  Float     @default(0) // Total money value deposited
  totalWithdrawn  Float     @default(0) // Total money value withdrawn
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  alliance        Alliance  @relation(fields: [allianceId], references: [id], onDelete: Cascade)
  transactions    HoldingTransaction[]

  @@unique([userId, allianceId])
  @@map("member_holdings")
}

// Transaction log for holdings deposits/withdrawals
model HoldingTransaction {
  id              String    @id @default(cuid())
  holdingId       String    // Reference to the member holding
  userId          String    // User who performed the transaction
  type            String    // 'deposit' or 'withdraw'
  
  // Resources involved in transaction
  money           Float?
  coal            Float?
  oil             Float?
  uranium         Float?
  iron            Float?
  bauxite         Float?
  lead            Float?
  gasoline        Float?
  munitions       Float?
  steel           Float?
  aluminum        Float?
  food            Float?
  
  // P&W bank record reference if applicable
  pwBankRecordId  Int?      // P&W Bank Record ID for real transactions
  note            String?   // Transaction note
  
  createdAt       DateTime  @default(now())

  holding         MemberHolding @relation(fields: [holdingId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("holding_transactions")
}
